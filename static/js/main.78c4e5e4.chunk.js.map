{"version":3,"sources":["serviceWorker.js","actions/listActions.js","components/AddInput.js","actions/type.js","actions/dndActions.js","components/ListOverviewItem.js","components/ListsOverview.js","actions/todoActions.js","components/TodoItem.js","components/TodoList.js","App.js","reducers/util.js","store/store.js","reducers/todoListsReducer.js","reducers/selectedListReducer.js","index.js","reducers/rootReducer.js","store/localStore.js"],"names":["Boolean","window","location","hostname","match","uuid","AddInput","lable","onAdd","useState","value","setValue","className","onSubmit","e","preventDefault","type","placeholder","aria-label","onChange","target","actionType","Object","freeze","addList","selectList","deleteList","addTodo","checkTodo","clearCompletedTodos","reorderTodo","moveTodoToList","reorderTodoList","name","id","addListWithId","DragItemType","todoItem","todoList","item","toList","ActionType","list","to","ListOverviewItemView","dragRef","isSelected","onSelect","ref","onClick","ListOverviewItem","dispatch","useDispatch","dispatchMoveItemToList","R","dispatchReorderTodoList","useRef","useDrag","collect","monitor","isDragging","drag","useDrop","accept","drop","hover","ListsOverviewView","todoLists","selectedListId","dispatchSelectList","map","key","addAction","addAndSelectList","getTodoLists","getSelectedListId","selectedList","ListsOverview","useSelector","addTodoWithId","addTodoFactory","TodoItemView","done","dispatchCheckTodo","style","opacity","checked","htmlFor","TodoItem","dispatchReorderTodo","TodoListView","todos","remainingTodos","filter","length","fromList","getSelectedList","find","TodoList","App","reducers","href","buildStoreFactory","createStore","applyMiddleware","thunk","composeWithDevTools","rootReducer","preloadedState","keepRefIfEqual","defaultValue","keepRefIfNoChange","fn","x","adjustOnCondition","condition","updater","adjustObjectProp","object","initialState","todo","addTodoInList","addTodoInTodos","listId","checkTodoInList","checkTodoWithId","clearCompletedTodosInTodos","clearCompletedTodosInList","fromListId","from","toIndex","movingItem","state","removeTodoFromList","toListId","addExistingTodoToList","movingList","undefined","store","buildStore","rootState","action","reducer","localStorage","storeKey","stateString","getItem","JSON","parse","getStateFromLocalStore","subscribe","setItem","stringify","getState","syncToLocalStore","ReactDOM","render","DndProvider","backend","DndBackend","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78c4e5e4.chunk.js","sourcesContent":["/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { uuid } from 'uuidv4'\r\nimport actionType from './type'\r\n\r\nexport const addListWithId = (name, id) => ({\r\n\ttype: actionType.addList,\r\n\tname,\r\n\tid,\r\n})\r\n\r\nexport const addListFactory = uuid => name => addListWithId(name, uuid())\r\n\r\nexport const addList = addListFactory(uuid)\r\n\r\nexport const selectList = (id, name) => ({\r\n\ttype: actionType.selectList,\r\n\tid,\r\n\tname,\r\n})\r\n\r\nexport const deleteList = (id, name) => ({\r\n\ttype: actionType.deleteList,\r\n\tid,\r\n\tname,\r\n})\r\n\r\nexport const addAndSelectList = name => dispatch => {\r\n\tconst addAction = addList(name)\r\n\tdispatch(addAction)\r\n\tdispatch(selectList(addAction.id, name))\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './AddInput.css'\r\n\r\nconst AddInput = ({ lable, onAdd }) => {\r\n\tconst [value, setValue] = useState('')\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault()\r\n\t\tonAdd(value)\r\n\t\tsetValue('')\r\n\t}\r\n\treturn <form className=\"add-input\" onSubmit={handleSubmit}>\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tplaceholder={lable}\r\n\t\t\taria-label={lable}\r\n\t\t\tvalue={value}\r\n\t\t\tonChange={e => {\r\n\t\t\t\tsetValue(e.target.value)\r\n\t\t\t}}\r\n\t\t/>\r\n\t\t<button aria-label=\"create new list\">+</button>\r\n\t</form>\r\n}\r\n\r\nAddInput.propTypes = {\r\n\tlable: PropTypes.string,\r\n\tonAdd: PropTypes.func,\r\n}\r\n\r\nexport default AddInput\r\n","const actionType = Object.freeze({\r\n\taddList: 'ADD_LIST',\r\n\tselectList: 'SELECT_LIST',\r\n\tdeleteList: 'DELETE_LIST',\r\n\r\n\taddTodo: 'ADD_TODO',\r\n\tcheckTodo: 'CHECK_TODO',\r\n\tclearCompletedTodos: 'CLEAR_COMPLETED_TODOS',\r\n\r\n\treorderTodo: 'REORDER_TODO',\r\n\tmoveTodoToList: 'MOVE_TODO_TO_LIST',\r\n\treorderTodoList: 'REORDER_TODO_LIST',\r\n})\r\n\r\nexport default actionType\r\n","import ActionType from './type'\r\n\r\nexport const DragItemType = Object.freeze({\r\n\ttodoItem: 'TODO_ITEM',\r\n\ttodoList: 'TODO_LIST',\r\n})\r\n\r\nexport const reorderTodo = (item, to) => ({\r\n\ttype: ActionType.reorderTodo,\r\n\titem,\r\n\tto,\r\n})\r\n\r\nexport const moveTodoToList = (item, toList) => ({\r\n\ttype: ActionType.moveTodoToList,\r\n\titem,\r\n\ttoList,\r\n})\r\n\r\nexport const reorderTodoList = (list, to) => ({\r\n\ttype: ActionType.reorderTodoList,\r\n\tlist,\r\n\tto,\r\n})\r\n\r\n","import React, { useRef } from 'react'\r\nimport { useDrag, useDrop } from 'react-dnd'\r\nimport { useDispatch } from 'react-redux'\r\nimport * as R from 'ramda'\r\n\r\nimport { DragItemType, moveTodoToList, reorderTodoList } from '../actions/dndActions'\r\n\r\nconst ListOverviewItemView = ({id, name, dragRef, isSelected, onSelect}) => {\r\n\treturn <li\r\n\t\tclassName={isSelected ? 'active' : ''}\r\n\t\tref={dragRef}\r\n\t\tonClick={() => onSelect(id, name)}\r\n\t>{name}</li>\r\n}\r\n\r\nconst ListOverviewItem = ({id, name, isSelected, onSelect}) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst dispatchMoveItemToList = R.compose(dispatch, moveTodoToList)\r\n\tconst dispatchReorderTodoList = R.compose(dispatch, reorderTodoList)\r\n\tconst dragRef = useRef()\r\n\tconst [{isDragging}, drag] = useDrag({\r\n\t\titem: {\r\n\t\t\ttype: DragItemType.todoList,\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t},\r\n\t\tcollect: monitor => ({\r\n\t\t\tisDragging: !!monitor.isDragging(),\r\n\t\t}),\r\n\t})\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: [DragItemType.todoItem, DragItemType.todoList],\r\n\t\tdrop: R.when(item => item.type === DragItemType.todoItem,\r\n\t\t\titem => dispatchMoveItemToList(item, {id, name})),\r\n\t\thover: R.when(list => list.type === DragItemType.todoList && !isDragging,\r\n\t\t\tlist => dispatchReorderTodoList(list, {id, name})),\r\n\t})\r\n\tdrag(drop(dragRef))\r\n\treturn <ListOverviewItemView id={id} name={name}\r\n\t\tdragRef={dragRef}\r\n\t\tisSelected={isSelected}\r\n\t\tonSelect={onSelect}\r\n\t/>\r\n}\r\n\r\nexport default ListOverviewItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport * as R from 'ramda'\r\nimport './ListsOverview.css'\r\n\r\nimport AddInput from './AddInput'\r\nimport { addAndSelectList, selectList } from '../actions/listActions'\r\nimport ListOverviewItem from './ListOverviewItem'\r\n\r\nexport const ListsOverviewView = ({todoLists, selectedListId, dispatch}) => {\r\n\tconst dispatchAddList = name => dispatch(addAndSelectList(name))\r\n\tconst dispatchSelectList = (id, name) => dispatch(selectList(id, name))\r\n\tconst renderListItem = ({name, id}) => <ListOverviewItem\r\n\t\tid={id} key={id} name={name}\r\n\t\tisSelected={id === selectedListId}\r\n\t\tonSelect={dispatchSelectList}\r\n\t/>\r\n\treturn <div className=\"lists-overview\">\r\n\t\t<h2>My lists</h2>\r\n\t\t<ul>\r\n\t\t\t{todoLists.map(renderListItem)}\r\n\t\t</ul>\r\n\t\t<AddInput lable=\"new list name\" onAdd={dispatchAddList} />\r\n\t</div>\r\n}\r\n\r\nListsOverviewView.propTypes = {\r\n\ttodoLists: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: PropTypes.string.isRequired,\r\n\t\tname: PropTypes.string.isRequired,\r\n\t})).isRequired,\r\n\tselectedListId: PropTypes.string,\r\n\tdispatch: PropTypes.func.isRequired,\r\n}\r\n\r\nexport const getTodoLists = R.prop('todoLists')\r\n\r\nexport const getSelectedListId = ({selectedList}) => selectedList.id\r\n\r\nconst ListsOverview = () => {\r\n\tconst todoLists = useSelector(getTodoLists)\r\n\tconst selectedListId = useSelector(getSelectedListId)\r\n\tconst dispatch = useDispatch()\r\n\treturn <ListsOverviewView todoLists={todoLists} selectedListId={selectedListId} dispatch={dispatch} />\r\n}\r\n\r\nexport default ListsOverview\r\n","import * as R from 'ramda'\r\nimport { uuid } from 'uuidv4'\r\nimport actionType from './type'\r\n\r\nexport const addTodoWithId = (name, toList, id) => ({\r\n\ttype: actionType.addTodo,\r\n\tname,\r\n\tid,\r\n\ttoList: R.pick(['id', 'name'], toList),\r\n})\r\n\r\nexport const addTodoFactory = uuid => (name, toList) => addTodoWithId(name, toList, uuid())\r\n\r\nexport const addTodo = addTodoFactory(uuid)\r\n\r\nexport const checkTodo = (id, name, done) => ({\r\n\ttype: actionType.checkTodo,\r\n\tid,\r\n\tname,\r\n\tdone,\r\n})\r\n\r\nexport const clearCompletedTodos = fromList => ({\r\n\ttype: actionType.clearCompletedTodos,\r\n\tfromList: R.pick(['id', 'name'], fromList),\r\n})\r\n","import React, { useRef } from 'react'\r\nimport { useDrag, useDrop } from 'react-dnd'\r\nimport { useDispatch } from 'react-redux'\r\nimport './TodoItem.css'\r\n\r\nimport { DragItemType } from '../actions/dndActions'\r\nimport { checkTodo } from '../actions/todoActions'\r\nimport { reorderTodo } from '../actions/dndActions'\r\n\r\nconst TodoItemView = ({id, name, done, dragRef, isDragging, dispatchCheckTodo}) => {\r\n\treturn <div className=\"todo\" ref={dragRef}\r\n\t\tstyle={{\r\n\t\t\topacity: isDragging ? 0 : 1,\r\n\t\t}}\r\n\t>\r\n\t\t<input\r\n\t\t\ttype=\"checkbox\"\r\n\t\t\tid={id}\r\n\t\t\tchecked={done}\r\n\t\t\tonChange={e => dispatchCheckTodo(id, name, e.target.checked)}\r\n\t\t/>\r\n\t\t<label htmlFor={id}>\r\n\t\t\t<span className=\"custom-checkbox\"></span>\r\n\t\t\t{name}\r\n\t\t</label>\r\n\t</div>\r\n}\r\n\r\nconst TodoItem = ({id, name, done}) => {\r\n\tconst dragRef = useRef()\r\n\tconst [{isDragging}, drag] = useDrag({\r\n\t\titem: {\r\n\t\t\ttype: DragItemType.todoItem,\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t},\r\n\t\tcollect: monitor => ({\r\n\t\t\tisDragging: !!monitor.isDragging(),\r\n\t\t}),\r\n\t})\r\n\tconst [, drop] = useDrop({\r\n\t\taccept: DragItemType.todoItem,\r\n\t\thover: (item) => isDragging ? null : dispatchReorderTodo(item, {id, name}),\r\n\t})\r\n\tconst dispatch = useDispatch()\r\n\tconst dispatchCheckTodo = (id, name, done) => dispatch(checkTodo(id, name, done))\r\n\tconst dispatchReorderTodo = (item, to) => dispatch(reorderTodo(item, to))\r\n\tdrag(drop(dragRef)) //STUDY: combining refs? not sure how this works\r\n\treturn <TodoItemView id={id} name={name} done={done}\r\n\t\tdragRef={dragRef} isDragging={isDragging}\r\n\t\tdispatchCheckTodo={dispatchCheckTodo}\r\n\t/>\r\n}\r\n\r\nexport default TodoItem\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './TodoList.css'\r\n\r\nimport AddInput from './AddInput'\r\nimport { deleteList } from '../actions/listActions'\r\nimport { addTodo, clearCompletedTodos } from '../actions/todoActions'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport const TodoListView = ({selectedList, dispatch}) => {\r\n\tif(!selectedList) return null\r\n\tconst { id, name, todos } = selectedList\r\n\tconst remainingTodos = todos.filter(({done}) => !done).length\r\n\tconst dispatchDeleteList = () => dispatch(deleteList(id, name))\r\n\tconst dispatchAddTodo = (name) => dispatch(addTodo(name, selectedList))\r\n\tconst dispatchClearCompletedTodos = () => dispatch(clearCompletedTodos(selectedList))\r\n\treturn <section className=\"todo-list\">\r\n\t\t<header>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{`${remainingTodos} ${remainingTodos===1 ? 'task' : 'tasks'} remaining`}</p>\r\n\t\t</header>\r\n\t\t<main>\r\n\t\t\t<div className=\"todos\">\r\n\t\t\t\t{todos.map(({id, name, done}) =>\r\n\t\t\t\t\t<TodoItem id={id} key={id} name={name} done={done} />)}\r\n\t\t\t</div>\r\n\t\t\t<AddInput lable=\"new task name\" onAdd={dispatchAddTodo} />\r\n\t\t</main>\r\n\t\t<footer>\r\n\t\t\t<button onClick={dispatchClearCompletedTodos}>Clear completed tasks</button>\r\n\t\t\t<button onClick={dispatchDeleteList}>Delete list</button>\r\n\t\t</footer>\r\n\t</section>\r\n}\r\n\r\nTodoListView.propTypes = {\r\n\tselectedList: PropTypes.shape({\r\n\t\tid: PropTypes.string.isRequired,\r\n\t\tname: PropTypes.string.isRequired,\r\n\t\ttodos: PropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tid: PropTypes.string.isRequired,\r\n\t\t\tname: PropTypes.string.isRequired,\r\n\t\t\tdone: PropTypes.bool.isRequired,\r\n\t\t})).isRequired,\r\n\t}),\r\n\tdispatch: PropTypes.func,\r\n}\r\n\r\nexport const getSelectedList = ({todoLists, selectedList}) => todoLists.find(({id}) => id === selectedList.id)\r\n\r\nconst TodoList = () => {\r\n\tconst selectedList = useSelector(getSelectedList)\r\n\tconst dispatch = useDispatch()\r\n\treturn <TodoListView selectedList={selectedList} dispatch={dispatch} />\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\nimport ListsOverview from './components/ListsOverview'\r\nimport TodoList from './components/TodoList'\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1 className=\"App-header\">Stuff I need to do</h1>\r\n\t\t\t<ListsOverview />\r\n\t\t\t<TodoList />\r\n\t\t\t<footer>\r\n\t\t\t\tThis project was inspired by Kevin Powell&apos;s <a href=\"https://github.com/kevin-powell/todo-list-collab\">todo-list-collab</a>\r\n\t\t\t</footer>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import * as R from 'ramda'\r\n\r\nexport const keepRefIfEqual = defaultValue => value =>\r\n\tR.equals(value, defaultValue) ? defaultValue : value\r\n\r\nexport const keepRefIfNoChange = fn => x => R.pipe(fn, keepRefIfEqual(x))(x)\r\n\r\nexport const adjustOnCondition = (condition, updater) => keepRefIfNoChange(\r\n\tR.map(x => {\r\n\t\tif(condition(x)){\r\n\t\t\treturn updater(x)\r\n\t\t}\r\n\t\treturn x\r\n\t}),\r\n)\r\n\r\nexport const adjustObjectProp = (key, updater) => keepRefIfNoChange(object => ({\r\n\t...object,\r\n\t[key]: updater(object[key]),\r\n}))\r\n\r\nexport const combineReducers = (reducers) => (state, action) => {\r\n\treturn R.pipe(\r\n\t\tR.map(reducer => reducer(state, action)),\r\n\t\tkeepRefIfEqual(state),\r\n\t)(reducers)\r\n}\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\r\n\r\nexport const buildStoreFactory = ({\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}) => ({\r\n\trootReducer,\r\n\tpreloadedState,\r\n}) => createStore(\r\n\trootReducer,\r\n\tpreloadedState,\r\n\tcomposeWithDevTools({})(applyMiddleware(thunk)),\r\n)\r\n\r\nexport const injectedDependencies = {\r\n\tcreateStore,\r\n\tapplyMiddleware,\r\n\tthunk,\r\n\tcomposeWithDevTools,\r\n}\r\n\r\nexport default buildStoreFactory(injectedDependencies)\r\n","import * as R from 'ramda'\r\nimport actionType from '../actions/type'\r\nimport { keepRefIfNoChange, adjustObjectProp, adjustOnCondition } from './util'\r\n\r\nconst initialState = []\r\n\r\nconst addList = (id, name) => R.append({\r\n\tid,\r\n\tname,\r\n\ttodos: [],\r\n})\r\n\r\nconst deleteList = id => R.filter(todo => todo.id !== id)\r\n\r\nconst addTodoInTodos = (id, name) => R.append({id, name, done: false})\r\n\r\nconst addTodoInList = (id, name) =>\r\n\tadjustObjectProp('todos', addTodoInTodos(id, name))\r\n\r\nconst addTodo = (listId, id, name) => adjustOnCondition(\r\n\t({id}) => id === listId,\r\n\taddTodoInList(id, name),\r\n)\r\n\r\nconst checkTodoWithId = (id, done) => adjustOnCondition(\r\n\ttodo => todo.id === id,\r\n\tR.assoc('done', done),\r\n)\r\n\r\nconst checkTodoInList = (id, done) =>\r\n\tadjustObjectProp('todos', checkTodoWithId(id, done))\r\n\r\nconst checkTodo = (id, done) => keepRefIfNoChange(R.map(\r\n\tcheckTodoInList(id, done),\r\n))\r\n\r\nconst clearCompletedTodosInTodos = R.filter(({done}) => !done)\r\n\r\nconst clearCompletedTodosInList =\r\n\tadjustObjectProp('todos', clearCompletedTodosInTodos)\r\n\r\nconst clearCompletedTodos = fromListId => adjustOnCondition(\r\n\t({id}) => id === fromListId,\r\n\tclearCompletedTodosInList,\r\n)\r\n\r\nconst reorderTodo = (from, to) => adjustOnCondition(\r\n\tlist => R.any(todo => todo.id === from.id, list.todos),\r\n\tadjustObjectProp('todos', todos => {\r\n\t\tconst toIndex = R.findIndex(todo => todo.id === to.id, todos)\r\n\t\tconst movingItem = R.find(todo => todo.id === from.id, todos)\r\n\t\treturn R.pipe(\r\n\t\t\tR.always(todos),\r\n\t\t\tR.without([movingItem]),\r\n\t\t\tR.insert(toIndex, movingItem),\r\n\t\t)()\r\n\t}),\r\n)\r\n\r\nconst findTodoById = id => R.pipe(\r\n\tR.map(R.pipe(\r\n\t\tR.prop('todos'),\r\n\t\tR.find(todo => todo.id === id),\r\n\t)),\r\n\tR.find(todo => !!todo),\r\n)\r\n\r\nconst removeTodoFromList = todo => adjustObjectProp('todos',\r\n\tR.filter(({id}) => id !== todo.id),\r\n)\r\n\r\nconst addExistingTodoToList = (todo, toListId) => adjustOnCondition(\r\n\tlist => list.id === toListId,\r\n\tadjustObjectProp('todos',\r\n\t\tR.append(todo),\r\n\t),\r\n)\r\n\r\nconst moveTodoToList = (item, toList) => (state) => {\r\n\tconst todo = findTodoById(item.id)(state)\r\n\tif(!todo){\r\n\t\treturn state\r\n\t}\r\n\treturn R.pipe(\r\n\t\tR.always(state),\r\n\t\tR.map(removeTodoFromList(todo)),\r\n\t\taddExistingTodoToList(todo, toList.id),\r\n\t)()\r\n}\r\n\r\nconst reorderTodoList = (from, to) => todoLists => {\r\n\tconst toIndex = R.findIndex(list => list.id === to.id, todoLists)\r\n\tconst movingList = R.find(list => list.id === from.id, todoLists)\r\n\treturn R.pipe(\r\n\t\tR.always(todoLists),\r\n\t\tR.without([movingList]),\r\n\t\tR.insert(toIndex, movingList),\r\n\t)()\r\n}\r\n\r\nconst todoListsReducer = (rootState = {}, action = {}) => {\r\n\tconst { todoLists: state = initialState } = rootState\r\n\tconst { type, id, name, toList, done, fromList, item, to, list } = action\r\n\tswitch(type){\r\n\tcase actionType.addList:\r\n\t\treturn addList(id, name)(state)\r\n\tcase actionType.deleteList:\r\n\t\treturn deleteList(id)(state)\r\n\tcase actionType.addTodo:\r\n\t\treturn addTodo(toList.id, id, name)(state)\r\n\tcase actionType.checkTodo:\r\n\t\treturn checkTodo(id, done)(state)\r\n\tcase actionType.clearCompletedTodos:\r\n\t\treturn clearCompletedTodos(fromList.id)(state)\r\n\tcase actionType.reorderTodo:\r\n\t\treturn reorderTodo(item, to)(state)\r\n\tcase actionType.moveTodoToList:\r\n\t\treturn moveTodoToList(item, toList)(state)\r\n\tcase actionType.reorderTodoList:\r\n\t\treturn reorderTodoList(list, to)(state)\r\n\tdefault:\r\n\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default todoListsReducer\r\n","import actionType from '../actions/type'\r\n\r\nconst initialState = {\r\n\tid: undefined,\r\n\tname: undefined,\r\n}\r\n\r\nconst selectedListReducer = (rootState = {}, action = {}) => {\r\n\tconst { selectedList: state = initialState } = rootState\r\n\tconst { type, id, name } = action\r\n\tswitch(type){\r\n\tcase actionType.selectList:\r\n\t\treturn {\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t}\r\n\tcase actionType.deleteList:\r\n\t\treturn initialState\r\n\tdefault:\r\n\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default selectedListReducer\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport { DndProvider } from 'react-dnd'\r\nimport DndBackend from 'react-dnd-html5-backend'\r\nimport './index.css'\r\n\r\nimport App from './App'\r\nimport buildStore from './store/store'\r\nimport rootReducer from './reducers/rootReducer'\r\nimport { syncToLocalStore, getStateFromLocalStore } from './store/localStore'\r\n\r\nconst store = buildStore({\r\n\trootReducer,\r\n\tpreloadedState: getStateFromLocalStore(window.localStorage, 'todo list'),\r\n})\r\nstore.subscribe(syncToLocalStore(window.localStorage, 'todo list', store))\r\n\r\nReactDOM.render(\r\n\t<DndProvider backend={DndBackend}>\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</DndProvider>,\r\n\tdocument.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","import { combineReducers } from './util'\r\nimport todoListsReducer from './todoListsReducer'\r\nimport selectedListReducer from './selectedListReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n\ttodoLists: todoListsReducer,\r\n\tselectedList: selectedListReducer,\r\n})\r\n\r\nexport default rootReducer\r\n","export const syncToLocalStore = (localStorage, storeKey, store) => () => {\r\n\tlocalStorage.setItem(storeKey, JSON.stringify(store.getState()))\r\n}\r\n\r\nexport const getStateFromLocalStore = (localStorage, storeKey) => {\r\n\tconst stateString = localStorage.getItem(storeKey)\r\n\tif(!stateString) return undefined\r\n\ttry{\r\n\t\treturn JSON.parse(stateString)\r\n\t}catch(e){\r\n\t\treturn undefined\r\n\t}\r\n}\r\n"],"sourceRoot":""}
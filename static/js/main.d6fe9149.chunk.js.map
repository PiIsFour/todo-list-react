{"version":3,"sources":["serviceWorker.js","actions/listActions.js","components/AddInput.js","actions/type.js","components/ListsOverview.js","actions/todoActions.js","components/TodoList.js","App.js","reducers/util.js","store/store.js","reducers/todoListsReducer.js","reducers/selectedListReducer.js","index.js","reducers/rootReducer.js","store/localStore.js"],"names":["Boolean","window","location","hostname","match","uuid","AddInput","lable","onAdd","useState","value","setValue","className","onSubmit","e","preventDefault","type","placeholder","aria-label","onChange","target","actionType","Object","freeze","addList","selectList","deleteList","addTodo","checkTodo","clearCompletedTodos","name","id","addListWithId","ListsOverviewView","todoLists","selectedListId","dispatch","map","key","onClick","dispatchSelectList","addAction","addAndSelectList","getTodoLists","R","getSelectedListId","selectedList","ListsOverview","useSelector","useDispatch","toList","addTodoWithId","addTodoFactory","TodoListView","todos","remainingTodos","filter","done","length","dispatchCheckTodo","checked","htmlFor","renderTodo","fromList","getSelectedList","find","TodoList","App","reducers","href","buildStoreFactory","createStore","applyMiddleware","thunk","composeWithDevTools","rootReducer","preloadedState","keepRefIfEqual","defaultValue","keepRefIfNoChange","fn","x","adjustOnCondition","condition","updater","adjustObjectProp","object","initialState","todo","addTodoInList","addTodoInTodos","listId","checkTodoInList","checkTodoWithId","clearCompletedTodosInTodos","clearCompletedTodosInList","fromListId","undefined","store","buildStore","rootState","action","state","reducer","localStorage","storeKey","stateString","getItem","JSON","parse","getStateFromLocalStore","subscribe","setItem","stringify","getState","syncToLocalStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d6fe9149.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { uuid } from 'uuidv4'\nimport actionType from './type'\n\nexport const addListWithId = (name, id) => ({\n\ttype: actionType.addList,\n\tname,\n\tid,\n})\n\nexport const addListFactory = uuid => name => addListWithId(name, uuid())\n\nexport const addList = addListFactory(uuid)\n\nexport const selectList = (id, name) => ({\n\ttype: actionType.selectList,\n\tid,\n\tname,\n})\n\nexport const deleteList = (id, name) => ({\n\ttype: actionType.deleteList,\n\tid,\n\tname,\n})\n\nexport const addAndSelectList = name => dispatch => {\n\tconst addAction = addList(name)\n\tdispatch(addAction)\n\tdispatch(selectList(addAction.id, name))\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport './AddInput.css'\n\nconst AddInput = ({ lable, onAdd }) => {\n\tconst [value, setValue] = useState('')\n\tconst handleSubmit = e => {\n\t\te.preventDefault()\n\t\tonAdd(value)\n\t\tsetValue('')\n\t}\n\treturn <form className=\"add-input\" onSubmit={handleSubmit}>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tplaceholder={lable}\n\t\t\taria-label={lable}\n\t\t\tvalue={value}\n\t\t\tonChange={e => {\n\t\t\t\tsetValue(e.target.value)\n\t\t\t}}\n\t\t/>\n\t\t<button aria-label=\"create new list\">+</button>\n\t</form>\n}\n\nAddInput.propTypes = {\n\tlable: PropTypes.string,\n\tonAdd: PropTypes.func,\n}\n\nexport default AddInput\n","const actionType = Object.freeze({\n\taddList: 'ADD_LIST',\n\tselectList: 'SELECT_LIST',\n\tdeleteList: 'DELETE_LIST',\n\n\taddTodo: 'ADD_TODO',\n\tcheckTodo: 'CHECK_TODO',\n\tclearCompletedTodos: 'CLEAR_COMPLETED_TODOS',\n})\n\nexport default actionType\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\nimport * as R from 'ramda'\nimport './ListsOverview.css'\n\nimport AddInput from './AddInput'\nimport { addAndSelectList, selectList } from '../actions/listActions'\n\nexport const ListsOverviewView = ({todoLists, selectedListId, dispatch}) => {\n\tconst dispatchAddList = name => dispatch(addAndSelectList(name))\n\tconst dispatchSelectList = (id, name) => dispatch(selectList(id, name))\n\tconst renderListItem = ({name, id}) => <li\n\t\tclassName={id === selectedListId ? 'active' : ''}\n\t\tkey={id}\n\t\tonClick={() => dispatchSelectList(id, name)}\n\t>{name}</li>\n\treturn <div className=\"lists-overview\">\n\t\t<h2>My lists</h2>\n\t\t<ul>\n\t\t\t{todoLists.map(renderListItem)}\n\t\t</ul>\n\t\t<AddInput lable=\"new list name\" onAdd={dispatchAddList} />\n\t</div>\n}\n\nListsOverviewView.propTypes = {\n\ttodoLists: PropTypes.arrayOf(PropTypes.shape({\n\t\tid: PropTypes.string.isRequired,\n\t\tname: PropTypes.string.isRequired,\n\t})).isRequired,\n\tselectedListId: PropTypes.string,\n\tdispatch: PropTypes.func.isRequired,\n}\n\nexport const getTodoLists = R.prop('todoLists')\n\nexport const getSelectedListId = ({selectedList}) => selectedList.id\n\nconst ListsOverview = () => {\n\tconst todoLists = useSelector(getTodoLists)\n\tconst selectedListId = useSelector(getSelectedListId)\n\tconst dispatch = useDispatch()\n\treturn <ListsOverviewView todoLists={todoLists} selectedListId={selectedListId} dispatch={dispatch} />\n}\n\nexport default ListsOverview\n","import * as R from 'ramda'\nimport { uuid } from 'uuidv4'\nimport actionType from './type'\n\nexport const addTodoWithId = (name, toList, id) => ({\n\ttype: actionType.addTodo,\n\tname,\n\tid,\n\ttoList: R.pick(['id', 'name'], toList),\n})\n\nexport const addTodoFactory = uuid => (name, toList) => addTodoWithId(name, toList, uuid())\n\nexport const addTodo = addTodoFactory(uuid)\n\nexport const checkTodo = (id, name, done) => ({\n\ttype: actionType.checkTodo,\n\tid,\n\tname,\n\tdone,\n})\n\nexport const clearCompletedTodos = fromList => ({\n\ttype: actionType.clearCompletedTodos,\n\tfromList: R.pick(['id', 'name'], fromList),\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './TodoList.css'\n\nimport AddInput from './AddInput'\nimport { deleteList } from '../actions/listActions'\nimport { addTodo, checkTodo, clearCompletedTodos } from '../actions/todoActions'\n\nconst renderTodo = dispatchCheckTodo => ({id, name, done}) =>\n\t<div className=\"todo\" key={id} >\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\tid={id}\n\t\t\tchecked={done}\n\t\t\tonChange={e => dispatchCheckTodo(id, name, e.target.checked)}\n\t\t/>\n\t\t<label htmlFor={id}>\n\t\t\t<span className=\"custom-checkbox\"></span>\n\t\t\t{name}\n\t\t</label>\n\t</div>\n\nexport const TodoListView = ({selectedList, dispatch}) => {\n\tif(!selectedList) return null\n\tconst { id, name, todos } = selectedList\n\tconst remainingTodos = todos.filter(({done}) => !done).length\n\tconst dispatchDeleteList = () => dispatch(deleteList(id, name))\n\tconst dispatchAddTodo = (name) => dispatch(addTodo(name, selectedList))\n\tconst dispatchCheckTodo = (id, name, done) => dispatch(checkTodo(id, name, done))\n\tconst dispatchClearCompletedTodos = () => dispatch(clearCompletedTodos(selectedList))\n\treturn <section className=\"todo-list\">\n\t\t<header>\n\t\t\t<h2>{name}</h2>\n\t\t\t<p>{`${remainingTodos} ${remainingTodos===1 ? 'task' : 'tasks'} remaining`}</p>\n\t\t</header>\n\t\t<main>\n\t\t\t<div className=\"todos\">\n\t\t\t\t{todos.map(renderTodo(dispatchCheckTodo))}\n\t\t\t</div>\n\t\t\t<AddInput lable=\"new task name\" onAdd={dispatchAddTodo} />\n\t\t</main>\n\t\t<footer>\n\t\t\t<button onClick={dispatchClearCompletedTodos}>Clear completed tasks</button>\n\t\t\t<button onClick={dispatchDeleteList}>Delete list</button>\n\t\t</footer>\n\t</section>\n}\n\nTodoListView.propTypes = {\n\tselectedList: PropTypes.shape({\n\t\tid: PropTypes.string.isRequired,\n\t\tname: PropTypes.string.isRequired,\n\t\ttodos: PropTypes.arrayOf(PropTypes.shape({\n\t\t\tid: PropTypes.string.isRequired,\n\t\t\tname: PropTypes.string.isRequired,\n\t\t\tdone: PropTypes.bool.isRequired,\n\t\t})).isRequired,\n\t}),\n\tdispatch: PropTypes.func,\n}\n\nexport const getSelectedList = ({todoLists, selectedList}) => todoLists.find(({id}) => id === selectedList.id)\n\nconst TodoList = () => {\n\tconst selectedList = useSelector(getSelectedList)\n\tconst dispatch = useDispatch()\n\treturn <TodoListView selectedList={selectedList} dispatch={dispatch} />\n}\n\nexport default TodoList\n","import React from 'react'\nimport './App.css'\n\nimport ListsOverview from './components/ListsOverview'\nimport TodoList from './components/TodoList'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"App-header\">Stuff I need to do</h1>\n\t\t\t<ListsOverview />\n\t\t\t<TodoList />\n\t\t\t<footer>\n\t\t\t\tThis project was inspired by Kevin Powell&apos;s <a href=\"https://github.com/kevin-powell/todo-list-collab\">todo-list-collab</a>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import * as R from 'ramda'\n\nexport const keepRefIfEqual = defaultValue => value =>\n\tR.equals(value, defaultValue) ? defaultValue : value\n\nexport const keepRefIfNoChange = fn => x => R.pipe(fn, keepRefIfEqual(x))(x)\n\nexport const adjustOnCondition = (condition, updater) => keepRefIfNoChange(\n\tR.map(x => {\n\t\tif(condition(x)){\n\t\t\treturn updater(x)\n\t\t}\n\t\treturn x\n\t}),\n)\n\nexport const adjustObjectProp = (key, updater) => keepRefIfNoChange(object => ({\n\t...object,\n\t[key]: updater(object[key]),\n}))\n\nexport const combineReducers = (reducers) => (state, action) => {\n\treturn R.pipe(\n\t\tR.map(reducer => reducer(state, action)),\n\t\tkeepRefIfEqual(state),\n\t)(reducers)\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction'\n\nexport const buildStoreFactory = ({\n\tcreateStore,\n\tapplyMiddleware,\n\tthunk,\n\tcomposeWithDevTools,\n}) => ({\n\trootReducer,\n\tpreloadedState,\n}) => createStore(\n\trootReducer,\n\tpreloadedState,\n\tcomposeWithDevTools({})(applyMiddleware(thunk)),\n)\n\nexport const injectedDependencies = {\n\tcreateStore,\n\tapplyMiddleware,\n\tthunk,\n\tcomposeWithDevTools,\n}\n\nexport default buildStoreFactory(injectedDependencies)\n","import * as R from 'ramda'\nimport actionType from '../actions/type'\nimport { keepRefIfNoChange, adjustObjectProp, adjustOnCondition } from './util'\n\nconst initialState = []\n\nconst addList = (id, name) => R.append({\n\tid,\n\tname,\n\ttodos: [],\n})\n\nconst deleteList = id => R.filter(todo => todo.id !== id)\n\nconst addTodoInTodos = (id, name) => R.append({id, name, done: false})\n\nconst addTodoInList = (id, name) =>\n\tadjustObjectProp('todos', addTodoInTodos(id, name))\n\nconst addTodo = (listId, id, name) => adjustOnCondition(\n\t({id}) => id === listId,\n\taddTodoInList(id, name),\n)\n\nconst checkTodoWithId = (id, done) => adjustOnCondition(\n\ttodo => todo.id === id,\n\tR.assoc('done', done),\n)\n\nconst checkTodoInList = (id, done) =>\n\tadjustObjectProp('todos', checkTodoWithId(id, done))\n\nconst checkTodo = (id, done) => keepRefIfNoChange(R.map(\n\tcheckTodoInList(id, done),\n))\n\nconst clearCompletedTodosInTodos = R.filter(({done}) => !done)\n\nconst clearCompletedTodosInList =\n\tadjustObjectProp('todos', clearCompletedTodosInTodos)\n\nconst clearCompletedTodos = fromListId => adjustOnCondition(\n\t({id}) => id === fromListId,\n\tclearCompletedTodosInList,\n)\n\nconst todoListsReducer = (rootState = {}, action = {}) => {\n\tconst { todoLists: state = initialState } = rootState\n\tconst { type, id, name, toList, done, fromList } = action\n\tswitch(type){\n\tcase actionType.addList:\n\t\treturn addList(id, name)(state)\n\tcase actionType.deleteList:\n\t\treturn deleteList(id)(state)\n\tcase actionType.addTodo:\n\t\treturn addTodo(toList.id, id, name)(state)\n\tcase actionType.checkTodo:\n\t\treturn checkTodo(id, done)(state)\n\tcase actionType.clearCompletedTodos:\n\t\treturn clearCompletedTodos(fromList.id)(state)\n\tdefault:\n\t\treturn state\n\t}\n}\n\nexport default todoListsReducer\n","import actionType from '../actions/type'\n\nconst initialState = {\n\tid: undefined,\n\tname: undefined,\n}\n\nconst selectedListReducer = (rootState = {}, action = {}) => {\n\tconst { selectedList: state = initialState } = rootState\n\tconst { type, id, name } = action\n\tswitch(type){\n\tcase actionType.selectList:\n\t\treturn {\n\t\t\tid,\n\t\t\tname,\n\t\t}\n\tcase actionType.deleteList:\n\t\treturn initialState\n\tdefault:\n\t\treturn state\n\t}\n}\n\nexport default selectedListReducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from 'react-redux'\nimport './index.css'\n\nimport App from './App'\nimport buildStore from './store/store'\nimport rootReducer from './reducers/rootReducer'\nimport { syncToLocalStore, getStateFromLocalStore } from './store/localStore'\n\nconst store = buildStore({\n\trootReducer,\n\tpreloadedState: getStateFromLocalStore(window.localStorage, 'todo list'),\n})\nstore.subscribe(syncToLocalStore(window.localStorage, 'todo list', store))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { combineReducers } from './util'\nimport todoListsReducer from './todoListsReducer'\nimport selectedListReducer from './selectedListReducer'\n\nconst rootReducer = combineReducers({\n\ttodoLists: todoListsReducer,\n\tselectedList: selectedListReducer,\n})\n\nexport default rootReducer\n","export const syncToLocalStore = (localStorage, storeKey, store) => () => {\n\tlocalStorage.setItem(storeKey, JSON.stringify(store.getState()))\n}\n\nexport const getStateFromLocalStore = (localStorage, storeKey) => {\n\tconst stateString = localStorage.getItem(storeKey)\n\tif(!stateString) return undefined\n\ttry{\n\t\treturn JSON.parse(stateString)\n\t}catch(e){\n\t\treturn undefined\n\t}\n}\n"],"sourceRoot":""}